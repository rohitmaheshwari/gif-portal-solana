{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","useEffect","onLoad","checkIfWalletIsConnected","window","addEventListener","removeEventListener","getGifList","a","provider","getProvider","program","Program","account","fetch","publicKey","console","log","solana","isPhantom","connect","onlyIfTrusted","response","toString","error","connectWallet","onInputChange","e","value","target","connection","Connection","Provider","createGifAccount","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","sendGif","length","addGif","className","onClick","onSubmit","event","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","style","color","fontSize","userAddress","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98c30c83.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.4844b78f.svg\";","import { useState, useEffect } from 'react';\r\nimport twitterLogo from './assets/twitter-logo.svg';\r\nimport './App.css';\r\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\r\nimport { Program, Provider, web3 } from '@project-serum/anchor';\r\nimport idl from './idl.json';\r\nimport kp from './keypair.json';\r\n\r\n// SystemProgram is a reference to the Solana runtime!\r\nconst { SystemProgram, Keypair } = web3;\r\n\r\n// Create a keypair for the account that will hold the GIF data.\r\nconst arr = Object.values(kp._keypair.secretKey);\r\nconst secret = new Uint8Array(arr);\r\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\r\n\r\n// Get our program's id from the IDL file.\r\nconst programID = new PublicKey(idl.metadata.address);\r\n\r\n// Set our network to devnet.\r\nconst network = clusterApiUrl('devnet');\r\n\r\n// Controls how we want to acknowledge when a transaction is \"done\".\r\nconst opts = {\r\n  preflightCommitment: \"processed\"\r\n}\r\n\r\n// Constants\r\nconst TWITTER_HANDLE = '_buildspace';\r\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\n\r\nconst TEST_GIFS = [\r\n  'https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp',\r\n  'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g',\r\n  'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g',\r\n  'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'\r\n]\r\n\r\nconst App = () => {\r\n  const [walletAddress, setWalletAddress] = useState(null);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [gifList, setGifList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const onLoad = () => {\r\n      checkIfWalletIsConnected();\r\n    }\r\n    window.addEventListener('load', onLoad);\r\n    return () => window.removeEventListener('load', onLoad);\r\n  }, []);\r\n\r\n  const getGifList = async () => {\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\r\n\r\n      console.log(\"Got the account\", account)\r\n      setGifList(account.gifList)\r\n\r\n    } catch (error) {\r\n      console.log(\"Error in getGifList: \", error)\r\n      setGifList(null);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (walletAddress) {\r\n      console.log('Fetching GIF list...');\r\n      getGifList()\r\n    }\r\n  }, [walletAddress]);\r\n\r\n\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { solana } = window;\r\n      if (solana) {\r\n        if (solana.isPhantom) {\r\n          console.log(\"Phantom Wallet Found!\");\r\n\r\n          const response = await solana.connect({ onlyIfTrusted: true })\r\n          console.log('Connected with public key: ', response.publicKey.toString());\r\n\r\n          setWalletAddress(response.publicKey.toString());\r\n        }\r\n        else {\r\n          console.log(\"Solana object not found. Get a phantom wallet\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  const connectWallet = async () => {\r\n    const { solana } = window;\r\n\r\n    if (solana) {\r\n      const response = await solana.connect();\r\n      console.log(\"Connected with public key: \", response.publicKey.toString());\r\n      setWalletAddress(response.publicKey.toString());\r\n    }\r\n  }\r\n\r\n  const renderNotConnectedContainer = () => (\r\n    <button className=\"cta-button connect-wallet-button\" onClick={() => connectWallet()}>\r\n      Connect to Wallet\r\n    </button>\r\n  );\r\n\r\n  const onInputChange = (e) => {\r\n    const { value } = e.target;\r\n    setInputValue(value);\r\n  }\r\n\r\n  const getProvider = () => {\r\n    const connection = new Connection(network, opts.preflightCommitment);\r\n    const provider = new Provider(\r\n      connection, window.solana, opts.preflightCommitment,\r\n    );\r\n    return provider;\r\n  }\r\n\r\n  const createGifAccount = async () => {\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n      console.log(\"ping\")\r\n      await program.rpc.startStuffOff({\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n          systemProgram: SystemProgram.programId,\r\n        },\r\n        signers: [baseAccount]\r\n      });\r\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\r\n      await getGifList();\r\n\r\n    } catch (error) {\r\n      console.log(\"Error creating BaseAccount account:\", error)\r\n    }\r\n  }\r\n\r\n  const sendGif = async () => {\r\n    if (inputValue.length === 0) {\r\n      console.log(\"No gif link given!\")\r\n      return\r\n    }\r\n    setInputValue('');\r\n    console.log('Gif link:', inputValue);\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n\r\n      await program.rpc.addGif(inputValue, {\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n        },\r\n      });\r\n      console.log(\"GIF successfully sent to program\", inputValue)\r\n\r\n      await getGifList();\r\n    } catch (error) {\r\n      console.log(\"Error sending GIF:\", error)\r\n    }\r\n  };\r\n\r\n  const renderConnectedContainer = () => {\r\n    // If we hit this, it means the program account hasn't been initialized.\r\n    if (gifList === null) {\r\n      return (\r\n        <div className=\"connected-container\">\r\n          <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\r\n            Do One-Time Initialization For GIF Program Account\r\n          </button>\r\n        </div>\r\n      )\r\n    }\r\n    // Otherwise, we're good! Account exists. User can submit GIFs.\r\n    else {\r\n      return (\r\n        <div className=\"connected-container\">\r\n          <form\r\n            onSubmit={(event) => {\r\n              event.preventDefault();\r\n              sendGif();\r\n            }}\r\n          >\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Enter gif link!\"\r\n              value={inputValue}\r\n              onChange={onInputChange}\r\n            />\r\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\r\n              Submit\r\n            </button>\r\n          </form>\r\n          <div className=\"gif-grid\">\r\n            {/* We use index as the key instead, also, the src is now item.gifLink */}\r\n            {gifList.map((item, index) => (\r\n              <div className=\"gif-item\" key={index}>\r\n                <img className='gif' src={item.gifLink} />\r\n                <p style={{ color: \"white\", fontSize: \"10px\" }}>{item.userAddress.toString()}</p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <div className=\"header-container\">\r\n          <p className=\"header\">🖼 GIF Portal</p>\r\n          <p className=\"sub-text\">\r\n            View your GIF collection in the metaverse ✨\r\n          </p>\r\n        </div>\r\n        {!walletAddress && renderNotConnectedContainer()}\r\n        {walletAddress && renderConnectedContainer()}\r\n        <div className=\"footer-container\">\r\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\r\n          <a\r\n            className=\"footer-text\"\r\n            href={TWITTER_LINK}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >{`built on @${TWITTER_HANDLE}`}</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}